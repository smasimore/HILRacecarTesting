/**	
 * File: IRSensorLookup.h
 * Author: Sarah Masimore
 * Last Updated Date: 04/19/2018
 * Description: Lookup table mapping mm to duty cycle required to produce
 *              expected 12-bit voltage value for IR sensor.
 */

#include <stdint.h>

#define IR_MIN_MM 73
#define IR_MAX_MM 610

// IR mm value is index + IR_MIN_MM, duty is in tenth of a percent
uint16_t IRMMToDuty[538] = {
	84,
	96,
	109,
	121,
	133,
	145,
	157,
	158,
	170,
	182,
	194,
	206,
	219,
	231,
	243,
	255,
	267,
	272,
	277,
	282,
	287,
	292,
	297,
	302,
	306,
	311,
	316,
	316,
	321,
	327,
	333,
	339,
	345,
	352,
	358,
	364,
	370,
	370,
	375,
	380,
	385,
	390,
	395,
	399,
	404,
	409,
	414,
	414,
	417,
	421,
	424,
	428,
	431,
	435,
	438,
	442,
	445,
	449,
	452,
	456,
	459,
	463,
	466,
	470,
	473,
	477,
	480,
	484,
	487,
	490,
	494,
	498,
	501,
	505,
	508,
	511,
	515,
	515,
	516,
	519,
	521,
	524,
	526,
	529,
	531,
	533,
	536,
	538,
	541,
	543,
	546,
	548,
	551,
	553,
	555,
	558,
	560,
	561,
	563,
	565,
	566,
	568,
	570,
	572,
	574,
	576,
	578,
	580,
	582,
	583,
	585,
	587,
	589,
	591,
	593,
	595,
	597,
	598,
	600,
	602,
	604,
	606,
	608,
	610,
	612,
	614,
	615,
	615,
	617,
	619,
	621,
	623,
	625,
	626,
	628,
	630,
	632,
	634,
	636,
	638,
	639,
	641,
	643,
	645,
	647,
	649,
	651,
	651,
	652,
	653,
	654,
	655,
	656,
	657,
	658,
	659,
	659,
	660,
	661,
	662,
	663,
	664,
	665,
	666,
	667,
	668,
	668,
	669,
	670,
	671,
	672,
	673,
	674,
	675,
	676,
	677,
	677,
	679,
	680,
	681,
	682,
	683,
	685,
	686,
	687,
	688,
	689,
	690,
	691,
	693,
	694,
	695,
	696,
	697,
	698,
	700,
	701,
	701,
	703,
	704,
	705,
	706,
	707,
	708,
	709,
	710,
	711,
	712,
	713,
	714,
	715,
	716,
	718,
	719,
	719,
	721,
	722,
	723,
	724,
	725,
	726,
	727,
	728,
	729,
	730,
	731,
	732,
	732,
	733,
	734,
	734,
	735,
	736,
	736,
	737,
	737,
	738,
	739,
	739,
	740,
	740,
	741,
	741,
	742,
	743,
	743,
	744,
	744,
	745,
	746,
	746,
	747,
	747,
	748,
	749,
	749,
	750,
	750,
	751,
	751,
	752,
	753,
	753,
	754,
	755,
	755,
	756,
	756,
	757,
	757,
	758,
	758,
	758,
	759,
	759,
	760,
	760,
	761,
	761,
	762,
	762,
	762,
	763,
	763,
	764,
	764,
	765,
	765,
	766,
	766,
	767,
	767,
	768,
	768,
	769,
	769,
	770,
	770,
	770,
	771,
	771,
	772,
	772,
	773,
	773,
	774,
	774,
	775,
	775,
	776,
	776,
	777,
	778,
	778,
	779,
	780,
	780,
	781,
	781,
	782,
	782,
	783,
	784,
	784,
	785,
	786,
	786,
	787,
	787,
	788,
	789,
	789,
	790,
	791,
	791,
	792,
	792,
	793,
	793,
	794,
	795,
	795,
	796,
	797,
	797,
	798,
	798,
	799,
	799,
	799,
	799,
	800,
	800,
	800,
	800,
	800,
	801,
	801,
	801,
	801,
	801,
	802,
	802,
	802,
	802,
	802,
	802,
	803,
	803,
	803,
	803,
	803,
	804,
	804,
	804,
	804,
	805,
	805,
	805,
	806,
	806,
	807,
	807,
	807,
	808,
	808,
	809,
	809,
	809,
	810,
	810,
	811,
	811,
	812,
	812,
	812,
	813,
	813,
	813,
	814,
	814,
	815,
	815,
	815,
	816,
	816,
	817,
	817,
	817,
	818,
	818,
	818,
	819,
	819,
	820,
	820,
	820,
	821,
	821,
	821,
	822,
	822,
	822,
	823,
	823,
	823,
	823,
	824,
	824,
	825,
	825,
	825,
	826,
	826,
	826,
	827,
	827,
	827,
	827,
	828,
	828,
	828,
	828,
	828,
	828,
	828,
	829,
	829,
	829,
	829,
	829,
	829,
	829,
	830,
	830,
	830,
	830,
	830,
	830,
	830,
	831,
	831,
	831,
	831,
	831,
	831,
	831,
	832,
	832,
	832,
	832,
	832,
	832,
	832,
	833,
	833,
	833,
	833,
	833,
	833,
	834,
	834,
	834,
	834,
	835,
	835,
	835,
	835,
	836,
	836,
	836,
	837,
	837,
	837,
	837,
	838,
	838,
	838,
	838,
	839,
	839,
	839,
	840,
	840,
	840,
	840,
	841,
	841,
	841,
	841,
	842,
	842,
	842,
	842,
	843,
	843,
	843,
	844,
	844,
	844,
	844,
	844,
	845,
	845,
	845,
	846,
	846,
	846,
	846,
	847,
	847,
	847,
	847,
	848,
	848,
	848,
	848,
	849,
};
